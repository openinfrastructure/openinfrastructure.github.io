{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Change",
  "description": "Data necessary to call the ic::change::json() function for a change scheduled over failure domains.",
  "type": "object",
  "additionalProperties": true,
  "properties": {
    "change": {
      "description": "The overall change governing one or more state transitions scheduled over failure domains.",
      "type": "object",
      "required": [
        "data"
      ],
      "additionalProperties": true,
      "properties": {
        "data": {
          "type": "object",
          "description": "Data passed to Ic::Change.new()",
          "required": [
            "change_id",
            "pauses"
          ],
          "additionalProperties": false,
          "properties": {
            "change_id": {
              "description": "Unique change identifier.  See https://github.com/openinfrastructure/puppet-ic/blob/v0.1.0/types/name.pp",
              "type": "string",
              "pattern": "^[a-z][a-z0-9_]{0,63}$"
            },
            "backout": {
              "description": "Transitions to the backout state if true",
              "type": "boolean",
              "default": false
            },
            "backout_state": {
              "description": "The state to enforce of backout is true.  Typically state a but a separate backout state may be fined, for example to ensure a file is absent instead of not managed.",
              "type": "string",
              "default": "a",
              "enum": [
                "a",
                "b",
                "backout"
              ]
            },
            "pauses": {
              "description": "Array of Pauses during which the rollout is halted.",
              "type": "array",
              "default": [],
              "items": {
                "$ref": "#/components/schemas/pause"
              }
            }
          }
        }
      }
    },
    "schedules": {
      "description": "List of objects used to match nodes to a schedule and failure domains.",
      "type": "array",
      "items": {
        "description": "Associates one Schedule with a Matcher, intended for Puppet to match a node to a schedule during catalog compilation",
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "matcher": {
            "description": "Match nodes to other things, primarily intended for scheduled failure domains.",
            "oneOf": [
              {"$ref": "#/components/schemas/varMatcher" },
              {"$ref": "#/components/schemas/allMatcher" }
            ]
          },
          "schedule": {
            "type": "object",
            "description": "Model a Schedule and associated FailureDomains",
            "required": ["data"],
            "additionalProperties": true,
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "default"
                ],
                "default": "default"
              },
              "data": {
                "type": "object",
                "description": "Data intended for Ic::Schedule.new",
                "required": [ "name" ],
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "pattern": "^[a-z][a-z0-9_]{0,63}$"
                  },
                  "soak_time": {
                    "type": "string",
                    "pattern": "^\\d{2}:\\d{2}:\\d{2}$"
                  },
                  "start_time": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "failure_domains": {
            "oneOf": [
              { "$ref": "#/components/schemas/membershipFailureDomain" },
              { "$ref": "#/components/schemas/thresholdFailureDomain" }
            ]
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "varMatcher": {
        "type": "object",
        "example": {
          "kind": "var",
          "priority": 50,
          "data": {
            "key": "::aud_dc",
            "value": "smf1"
          }
        },
        "required": [
          "kind",
          "data"
        ],
        "additionalProperties": true,
        "properties": {
          "kind": {
            "type": "string",
            "description": "Type hint for Puppet initializer",
            "default": "var",
            "enum": ["var"]
          },
          "priority": {
            "type": "integer",
            "description": "Priority of the matcher, 0 is the highest priority.",
            "minimum": 0,
            "default": 1000
          },
          "data": {
            "type": "object",
            "description": "Data passed to Ic::Matcher::Var.new()",
            "required": [
              "key",
              "value"
            ],
            "additionalProperties": false,
            "properties": {
              "key": {
                "type": "string",
                "description": "The Puppet DSL variable to check, for example ::aud_dc"
              },
              "value": {
                "description": "The value to compare against key's actual value using the == Puppet equality test, for example 'smf1'"
              }
            }
          }
        }
      },
      "allMatcher": {
        "type": "object",
        "description": "Match all nodes",
        "example": {
          "kind": "all",
          "priority": 1000
        },
        "required": [
          "kind"
        ],
        "additionalProperties": true,
        "properties": {
          "kind": {
            "type": "string",
            "description": "Type hint for Puppet initializer",
            "default": "all",
            "enum": ["all"]
          },
          "priority": {
            "type": "integer",
            "description": "Priority of the matcher, 0 is the highest priority.",
            "minimum": 0,
            "default": 1000
          },
          "data": {
            "type": "object",
            "additionalProperties": false
          }
        }
      },
      "membershipFailureDomain": {
        "type": "object",
        "description": "Transition nodes by matching a value associated with the node against a list.",
        "required": [
          "kind"
        ],
        "additionalProperties": true,
        "properties": {
          "kind": {
            "type": "string",
            "default": "membership",
            "enum": ["membership"]
          },
          "data": {
            "type": "object",
            "required": [
              "boarding_groups"
            ],
            "additionalProperties": false,
            "properties": {
              "boarding_groups": {
                "type": "array",
                "default": [],
                "items": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "thresholdFailureDomain": {
        "description": "Transition nodes by assigning each a random number and then increasing a threshold value each period of the rollout.",
        "type": "object",
        "required": [
          "kind",
          "data"
        ],
        "additionalProperties": true,
        "properties": {
          "kind": {
            "type": "string",
            "default": "threshold",
            "enum": ["threshold"]
          },
          "data": {
            "type": "object",
            "description": "Data passed to Ic::Failure_domains::Threshold.new()",
            "required": ["boarding_groups"],
            "additionalProperties": false,
            "properties": {
              "boarding_groups": {
                "type": "array",
                "default": [],
                "items": {
                  "type": "number",
                  "minimum": 0
                }
              }
            }
          }
        }
      },
      "pause": {
        "description": "Pause the rollout of a Change.  If end_time is null, the rollout is paused indefinitely.",
        "type": "object",
        "example": {
          "data": {
            "start_time": "2020-12-03T10:00:00-08:00",
            "end_time": "2020-12-03T12:00:00-08:00"
          }
        },
        "required": [
          "data"
        ],
        "additionalProperties": true,
        "properties": {
          "data": {
            "type": "object",
            "description": "Data intended for Ic::Pause.new()",
            "additionalProperties": false,
            "required": [
              "start_time"
            ],
            "properties": {
              "start_time": {
                "format": "date-time",
                "description": "Required start time when the Change rollout halts",
                "type": "string"
              },
              "end_time": {
                "format": "date-time",
                "description": "Optional end time when the Change rollout resumes",
                "type": "string"
              }
            }
          }
        }
      }
    }
  }
}
